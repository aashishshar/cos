using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.SqlClient;
using System.Configuration;
using System.Data;
using System.Web.Services;
using System.Collections.Specialized;
using EntityData;

public partial class frmSearch : BasePage
{
    SqlConnection con = new SqlConnection();
    DataTable dtBrand;
    DataTable dtMerchant;
    #region Private Properties
    public int pageSize { get; set; }
    private int CurrentPage
    {
        get
        {
            object objPage = ViewState["_CurrentPage"];
            int _CurrentPage = 0;
            if (objPage == null)
            {
                _CurrentPage = 0;
            }
            else
            {
                _CurrentPage = (int)objPage;
            }
            return _CurrentPage;
        }
        set { ViewState["_CurrentPage"] = value; }
    }
    private int fistIndex
    {
        get
        {

            int _FirstIndex = 0;
            if (ViewState["_FirstIndex"] == null)
            {
                _FirstIndex = 0;
            }
            else
            {
                _FirstIndex = Convert.ToInt32(ViewState["_FirstIndex"]);
            }
            return _FirstIndex;
        }
        set { ViewState["_FirstIndex"] = value; }
    }
    private int lastIndex
    {
        get
        {

            int _LastIndex = 0;
            if (ViewState["_LastIndex"] == null)
            {
                _LastIndex = 0;
            }
            else
            {
                _LastIndex = Convert.ToInt32(ViewState["_LastIndex"]);
            }
            return _LastIndex;
        }
        set { ViewState["_LastIndex"] = value; }
    }
    #endregion

    #region PagedDataSource
    PagedDataSource _PageDataSource = new PagedDataSource();
    #endregion

    protected void Page_Load(object sender, EventArgs e)
    {
        con = new SqlConnection(ConfigurationManager.ConnectionStrings["Ad_ConnectionStringMain"].ToString());
        this.pageSize = 48;
        if (!IsPostBack)
        {
            string categoryname = Page.RouteData.Values["pageTitle"] as string;// Convert.ToString(Request.QueryString["categoryname"]);
            Load_tree(Server.UrlDecode(categoryname));
            BindRecord(categoryname,"","");
        }
    }
   

    protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)
    {
        string val = TreeView1.SelectedNode.Text;
        ChangeURL(val);
    }

    public string BindAllCategories(string categoryName)
    {
        SqlCommand cmd = new SqlCommand("adv_FindAllChildForCategory", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@categoryname", categoryName);
        SqlDataAdapter daP = new SqlDataAdapter(cmd);
        DataTable dtp = new DataTable();
        daP.Fill(dtp);
        string strAllcategory = string.Empty;
        if (dtp != null)
        {
            if (dtp.Rows.Count > 0)
            {
                for (int i = 0; i < dtp.Rows.Count; i++)
                {
                    strAllcategory = strAllcategory + "'" + dtp.Rows[i]["CategoryID_N"].ToString() + "',";
                }
                strAllcategory = strAllcategory.TrimEnd(',');
            }
            else
            {
                SqlDataAdapter daCat = new SqlDataAdapter("select categoryid_n from mst_category where categoryname_v='" + categoryName + "'", con);
                DataTable dtcat = new DataTable();
                daCat.Fill(dtcat);
                if (dtcat != null)
                {
                    if (dtcat.Rows.Count > 0)
                        strAllcategory = dtcat.Rows[0]["categoryid_n"].ToString();
                }

            }
        }
        return strAllcategory;
    }
    public DataTable BindAllCategory(string categoryName)
    {
        SqlCommand cmd = new SqlCommand("adv_FindAllChildForCategory", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@categoryname", categoryName);
        SqlDataAdapter daP = new SqlDataAdapter(cmd);
        DataTable dtp = new DataTable();
        daP.Fill(dtp);
        return dtp;
    }
    public void BindMerchant(string categoryName,string BrandName)
    {
        string strAllcategory = string.Empty;
        string where=string.Empty;
        strAllcategory = BindAllCategories(categoryName);
        string stBrand = string.Empty;
        foreach (ListItem lstBrand in chkMerchant.Items)
        {
            if (lstBrand.Selected)
            {
                string input = string.Empty;
                int index = lstBrand.Text.LastIndexOf("(");
                if (index > 0)
                    input = lstBrand.Text.Substring(0, index - 1);
                stBrand = stBrand + input + ",";
            }
        }
        stBrand = stBrand.TrimEnd(',');
        string sql=string.Empty;
        if (BrandName == "")
             sql = "select distinct MID,MerchantNameDetail + ' ('+ cast(COUNT(*) as varchar(50))+')' as MerchantNameDetail from Mst_Category A  inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N inner join Adv_Mst_Merchant D on D.MID=C.Ad_For where isnull(Brand,'')!='' and A.CategoryID_N in(" + strAllcategory + ") group by MID,MerchantNameDetail";
        else
            sql = "select distinct MID,MerchantNameDetail + ' ('+ cast(COUNT(*) as varchar(50))+')' as MerchantNameDetail from Mst_Category A  inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N inner join Adv_Mst_Merchant D on D.MID=C.Ad_For where Brand in(" + BrandName + ") and A.CategoryID_N in(" + strAllcategory + ") group by MID,MerchantNameDetail";
        

        #region Record Count For Paging
        string sqlCount=string.Empty;
        if (BrandName == "")
             sqlCount = "select (count(*)/"+pageSize+")+1 from Mst_Category A  inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N inner join Adv_Mst_Merchant D on D.MID=C.Ad_For where isnull(Brand,'')!='' and A.CategoryID_N in(" + strAllcategory + ")";
        else
            sqlCount = "select (count(*)/" + pageSize + ")+1 from Mst_Category A  inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N inner join Adv_Mst_Merchant D on D.MID=C.Ad_For where Brand in(" + BrandName + ") and A.CategoryID_N in(" + strAllcategory + ")";
        SqlDataAdapter daCount = new SqlDataAdapter(sqlCount, con);
        DataTable dtCount = new DataTable();
        daCount.Fill(dtCount);
        ViewState["TotalPages"] = dtCount.Rows[0][0].ToString();
        #endregion
        SqlDataAdapter da = new SqlDataAdapter(sql, con);
        DataTable dt = new DataTable();
        da.Fill(dt);
        chkMerchant.DataSource = dt;
        chkMerchant.DataTextField = "MerchantNameDetail";
        chkMerchant.DataValueField = "MID";
        chkMerchant.DataBind();
        if (chkMerchant.Items.Count > 0)
            divmerchant.Visible = true;
        else
            divmerchant.Visible = false;

        string[] ary = stBrand.Split(',');
        for (int i = 0; i < ary.Length; i++)
        {
            foreach (ListItem lstBrand in chkMerchant.Items)
            {
                string input = string.Empty;
                int index = lstBrand.Text.LastIndexOf("(");
                if (index > 0)
                    input = lstBrand.Text.Substring(0, index - 1);
                if (input == ary[i].ToString())
                {
                    lstBrand.Selected = true;
                }
            }
        }
    }

    public void BindBrand(string categoryName,string Merchant)
    {
        string strAllcategory = string.Empty;
        strAllcategory = BindAllCategories(categoryName);
        string stBrand = string.Empty;
        foreach (ListItem lstBrand in chkBrand.Items)
        {
            if (lstBrand.Selected)
            {
                string input = string.Empty;
                int index = lstBrand.Text.LastIndexOf("(");
                if (index > 0)
                    input = lstBrand.Text.Substring(0, index - 1);
                stBrand = stBrand + input + ",";
            }
        }
        stBrand = stBrand.TrimEnd(',');
        string sql = string.Empty;
        if(Merchant==string.Empty)
            sql = "select distinct Brand,Brand + ' ('+ cast(COUNT(*) as varchar(50))+')' as Branddetail from Mst_Category A inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N  where  A.CategoryID_N in(" + strAllcategory + ") and isnull(Brand,'')!='' group by Brand order by brand";
        else
            sql = "select distinct Brand,Brand + ' ('+ cast(COUNT(*) as varchar(50))+')' as Branddetail from Mst_Category A inner join Adv_Product_Common C on A.CategoryID_N=C.CategoryID_N inner join Adv_Mst_Merchant M on M.MID=C.Ad_For where MerchantNameDetail in("+Merchant+") and  A.CategoryID_N in(" + strAllcategory + ") and isnull(Brand,'')!='' group by Brand order by brand";
        SqlDataAdapter da = new SqlDataAdapter(sql, con);
        DataTable dt = new DataTable();
        da.Fill(dt);
        chkBrand.DataSource = dt;
        chkBrand.DataTextField = "Branddetail";
        chkBrand.DataValueField = "Brand";
        chkBrand.DataBind();
        if (chkBrand.Items.Count > 0)
            divBrand.Visible = true;
        else
            divBrand.Visible = false;

        string[] ary = stBrand.Split(',');
        for (int i = 0; i < ary.Length; i++)
        {
            foreach (ListItem lstBrand in chkBrand.Items)
            {
                string input = string.Empty;
                int index = lstBrand.Text.LastIndexOf("(");
                if (index > 0)
                    input = lstBrand.Text.Substring(0, index - 1);
                if (input == ary[i].ToString())
                {
                    lstBrand.Selected = true;
                }
            }
        }

    }

    #region "SEO"
    private void SetSEOTags(DataTable dataTable, string categoryName)
    {
        clsSeoDetail detail = clsSeoClass.GetSEODetails(dataTable, categoryName);
        this.Title = detail.SeoTitle;
        this.MetaDescription = detail.SeoDescription;
        this.MetaKeywords = detail.SeoKeyword;
    }
    #endregion

    #region Bind Category Tree
    public void Load_tree(string category)
    {
        SqlCommand cmd = new SqlCommand("adv_FindAllParentForCategory", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@categoryname", category);
        SqlDataAdapter daP = new SqlDataAdapter(cmd);
        DataTable dtp = new DataTable();
        daP.Fill(dtp);
        ViewState["checkvalue"] = null;
        TreeView1.Nodes.Clear();

        SetSEOTags(dtp, category);

        foreach (DataRow dr in dtp.Rows)
        {
            if (Convert.ToString(dr["ParentCategoryID_N"]) == string.Empty)
            {
                TreeNode tnParent = new TreeNode();
                tnParent.Text = dr["CategoryName_V"].ToString();
                tnParent.Value = dr["CategoryID_N"].ToString();
                string value = dr["CategoryID_N"].ToString();
                tnParent.Expand();
                TreeView1.Nodes.Add(tnParent);
                FillParentChild(tnParent, value, category);
            }
        }
        BindBrand(category,"");
        BindMerchant(category,"");
    }
    public void FillParentChild(TreeNode parent, string ID, string category)
    {
        SqlCommand   cmd = new SqlCommand("adv_FindAllParentForCategoryNew", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@categoryname", category);
        cmd.Parameters.AddWithValue("@parentcategoryId", ID);
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        DataTable dt = new DataTable();
        da.Fill(dt);
        foreach (DataRow dr in dt.Rows)
        {
            TreeNode child = new TreeNode();
            child.Text = dr["CategoryName_V"].ToString().Trim();
            child.Value = dr["CategoryID_N"].ToString().Trim();
            string temp = dr["CategoryID_N"].ToString();
            child.Expand();
            parent.ChildNodes.Add(child);
            FillParentChild(child, temp, category);
        }

        if (dt.Rows.Count == 0 && Convert.ToString(ViewState["checkvalue"]) != "assign")
            FillChild(parent, ID);
    }
    public int FillChild(TreeNode parent, string ID)
    {
        string Childquery = " SELECT CategoryName_V,CategoryID_N from vw_FindAllChildForCategory where ParentCategoryID_N='" + ID + "'";
        SqlDataAdapter da = new SqlDataAdapter(Childquery, con);
        DataTable dt = new DataTable();
        da.Fill(dt);

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                TreeNode child = new TreeNode();
                child.Text = dr["CategoryName_V"].ToString().Trim();
                child.Value = dr["CategoryID_N"].ToString().Trim();
                string temp = dr["CategoryID_N"].ToString();
                child.Expand();
                parent.ChildNodes.Add(child);
            }
            return 0;
        }
        else
        {
            return 0;
        }
    }
    #endregion

    
    public string BindRecord(string categoryName,string sortby,string checkValue)
    {
        string CommonValue = string.Empty;
        try
        {
            DataTable dtprice = new DataTable();
            dtprice.Columns.Add("HighPrice");
            dtprice.Columns.Add("LowPrice");
            if (txtPriceTo.Text != string.Empty && txtpriceFrom.Text != string.Empty)
            {
                DataRow drPrice = dtprice.NewRow();
                drPrice["HighPrice"] = txtPriceTo.Text;
                drPrice["LowPrice"] = txtpriceFrom.Text;
                dtprice.Rows.Add(drPrice);
            }

            
            DataTable dtp = new DataTable();
            dtp = BindAllCategory(categoryName);
            dtMerchant = new DataTable();
            dtMerchant.Columns.Add("merchantID");
            dtMerchant.Columns.Add("merchantName");
            string strBrand = string.Empty;
            string strMerchant = string.Empty;
            foreach (ListItem lstMerchat in chkMerchant.Items)
            {
                if (lstMerchat.Selected)
                {
                    DataRow dr = dtMerchant.NewRow();
                    dr["merchantID"] = lstMerchat.Value;
                    string input = string.Empty;
                    int index = lstMerchat.Text.LastIndexOf("(");
                    if (index > 0)
                        input = lstMerchat.Text.Substring(0, index - 1);
                    dr["merchantName"] = input;
                    dtMerchant.Rows.Add(dr);
                    strMerchant = strMerchant + "'" + input + "'" + ",";
                }
            }

            dtBrand = new DataTable();
            dtBrand.Columns.Add("BrandName");

            foreach (ListItem lstbrand in chkBrand.Items)
            {
                if (lstbrand.Selected)
                {
                    DataRow dr = dtBrand.NewRow();
                    string input = string.Empty;
                    int index = lstbrand.Text.LastIndexOf("(");
                    if (index > 0)
                        input = lstbrand.Text.Substring(0, index - 1);
                    dr["BrandName"] = input;
                    dtBrand.Rows.Add(dr);
                    strBrand = strBrand + "'" + input + "'" + ",";
                }
            }

            SqlCommand cmd = new SqlCommand("GetOfferItemPageWiseSearch", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@PageIndex", CurrentPage+1);
            cmd.Parameters.AddWithValue("@PageSize", pageSize);
            cmd.Parameters.AddWithValue("@RecordCount", "");
            cmd.Parameters.AddWithValue("@categoryName_V", dtp);
            cmd.Parameters.AddWithValue("@Brandname", dtBrand);
            cmd.Parameters.AddWithValue("@MerchantName", dtMerchant);
            cmd.Parameters.AddWithValue("@searchType", "");
            cmd.Parameters.AddWithValue("@sortby", sortby);
            cmd.Parameters.AddWithValue("@price", dtprice);
            SqlDataAdapter daP = new SqlDataAdapter(cmd);
            DataTable dtProduct = new DataTable();
            daP.Fill(dtProduct);

           
            clsAssignDataCollection getVW_Item = new clsAssignDataCollection();
            uc_VwProduct1.ProductItemBind(getVW_Item.GetViewProductCommon(dtProduct.ToList<vw_OfferItem>()));
            PagingInRepeater();

             
             if (checkValue == "Merchant")
                 CommonValue = strMerchant.TrimEnd(',');
             else if(checkValue == "Brand")
                 CommonValue = strBrand.TrimEnd(',');
             return CommonValue;
        }
        catch (Exception ex)
        { }

        return CommonValue;
    }

    public void PagingInRepeater()
    {
        //Paging 
        this.lblPageInfo.Text = "Page " + (CurrentPage + 1) + " of " + ViewState["TotalPages"].ToString();
        if (CurrentPage == 0 && Convert.ToInt32(ViewState["TotalPages"]) * pageSize > pageSize)
        {
            lbtnPrevious.Enabled = false;
            lbtnNext.Enabled = true;
            lbtnFirst.Enabled = false;
            lbtnLast.Enabled = true;
        }
        else if (CurrentPage == 0 && Convert.ToInt32(ViewState["TotalPages"]) * pageSize <= pageSize)
        {
            lbtnPrevious.Enabled = false;
            lbtnNext.Enabled = false;
            lbtnFirst.Enabled = false;
            lbtnLast.Enabled = false;
        }
        else if (Convert.ToInt32(ViewState["TotalPages"]) == CurrentPage + 1)
        {
            lbtnPrevious.Enabled = true;
            lbtnNext.Enabled = false;
            lbtnFirst.Enabled = true;
            lbtnLast.Enabled = false;
        }
        else
        {
            lbtnPrevious.Enabled = true;
            lbtnNext.Enabled = true;
            lbtnFirst.Enabled = true;
            lbtnLast.Enabled = true;
        }
        doPaging();
        //EndPaging
    }
    public string discountPrice(double dicountPrice,double productPrice)
    {
        string disPrice = "";
        if (dicountPrice > 0)
        {
            double percentagePrice = 100 - (Convert.ToSingle(dicountPrice) * 100 / Convert.ToSingle(productPrice));
            if (Math.Round(percentagePrice) > 0)
            {
                disPrice = "<span style='text-decoration:line-through;'><b>Rs " + productPrice.ToString() + "</b></span>" + " " + "<span style='color: Black;'><b>Rs " + dicountPrice.ToString() + "</b></span> " + " " + " <span style='color: White;background-color:Green;border-radius:3px;padding:2px 3px 2px 3px;'><b>" + Math.Round(percentagePrice).ToString() + "%</b></span>";
            }
            else
            {
                disPrice = "<span style='color: Black;'><b>Rs " + productPrice.ToString() + "</b></span> ";
            }
        }
        else if (productPrice > 0 && Convert.ToInt32(dicountPrice) == 0)
        {
            disPrice = "<span style='color: Black;'><b>Rs " + productPrice.ToString() + "</b></span> ";
        }
        if (productPrice == 0 && dicountPrice == 0)
        {
            disPrice = "";
        }
        return disPrice;
    }


    protected void chkMerchant_SelectedIndexChanged(object sender, EventArgs e)
    {
        string MerchantValue=BindRecord(Convert.ToString(Request.QueryString["categoryname"]),"","Merchant");
        if(MerchantValue!=string.Empty)
            BindBrand(Convert.ToString(Request.QueryString["categoryname"]), MerchantValue);
        else
            BindBrand(Convert.ToString(Request.QueryString["categoryname"]), "");
        txtmerchant.Text = string.Empty;
        PagingInRepeater();
    }
    protected void chkBrand_SelectedIndexChanged(object sender, EventArgs e)
    {
        string BrandVale= BindRecord(Convert.ToString(Request.QueryString["categoryname"]),"","Brand");
        if(BrandVale!=string.Empty)
             BindMerchant(Convert.ToString(Request.QueryString["categoryname"]),BrandVale);
        else
            BindMerchant(Convert.ToString(Request.QueryString["categoryname"]), "");

        txtBrand.Text = string.Empty;
        PagingInRepeater();
    }
    public void ChangeURL(string categoryName)
    {
        string url = HttpContext.Current.Request.Url.AbsoluteUri;
        string[] separateURL = url.Split('?');
        NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(separateURL[1]);
        queryString["categoryname"] = categoryName;
        url = separateURL[0] + "?" + queryString.ToString();
        Response.Redirect(url);
    }
    protected void lnkLowPrice_Click(object sender, EventArgs e)
    {
        LinkButton lnk = (LinkButton)sender;
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]),lnk.Text,"");
    }
    protected void btnGo_Click(object sender, EventArgs e)
    {
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");
    }

#region DoPaging
    private void doPaging()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("PageIndex");
        dt.Columns.Add("PageText");

        fistIndex = CurrentPage - 5;


        if (CurrentPage > 5)
        {
            lastIndex = CurrentPage + 5;
        }
        else
        {
            lastIndex = 10;
        }
        if (lastIndex > Convert.ToInt32(ViewState["TotalPages"]))
        {
            lastIndex = Convert.ToInt32(ViewState["TotalPages"]);
            fistIndex = lastIndex - 10;
        }

        if (fistIndex < 0)
        {
            fistIndex = 0;
        }

        for (int i = fistIndex; i < lastIndex; i++)
        {
            DataRow dr = dt.NewRow();
            dr[0] = i;
            dr[1] = i + 1;
            dt.Rows.Add(dr);
        }

        this.dlPaging.DataSource = dt;
        this.dlPaging.DataBind();
    }
    protected void lbtnPrevious_Click(object sender, EventArgs e)
    {
        CurrentPage -= 1;
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");

    }

    protected void lbtnLast_Click(object sender, EventArgs e)
    {

        CurrentPage = (Convert.ToInt32(ViewState["TotalPages"]) - 1);
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");

    }
    protected void lbtnFirst_Click(object sender, EventArgs e)
    {

        CurrentPage = 0;
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");


    }
    protected void lbtnNext_Click(object sender, EventArgs e)
    {

        CurrentPage += 1;
        BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");

    }
    protected void dlPaging_ItemCommand(object source, RepeaterCommandEventArgs e)
    {
        if (e.CommandName.Equals("Paging"))
        {
            CurrentPage = Convert.ToInt16(e.CommandArgument.ToString());
            BindRecord(Convert.ToString(Request.QueryString["categoryname"]), "","");
        }
    }
    protected void dlPaging_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        LinkButton lnkbtnPage = (LinkButton)e.Item.FindControl("lnkbtnPaging");
        if (lnkbtnPage.CommandArgument.ToString() == CurrentPage.ToString())
        {
            lnkbtnPage.Enabled = false;
            lnkbtnPage.Style.Add("fone-size", "14px");
            lnkbtnPage.Font.Bold = true;

        }
    }
#endregion
}