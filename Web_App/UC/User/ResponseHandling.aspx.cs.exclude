using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Security.Cryptography;
using System.Text;
using System.Data.SqlClient;
using System.Net;

public partial class UC_User_ResponseHandling : BasePage
{
    protected void Page_Load(object sender, EventArgs e)
    {
        //try
        //{

        //    string[] merc_hash_vars_seq;
        //    string merc_hash_string = string.Empty;
        //    string merc_hash = string.Empty;
        //    string order_id = string.Empty;
        //    string hash_seq = "key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10";

        //    if (Request.Form["status"] == "success")
        //    {

        //        merc_hash_vars_seq = hash_seq.Split('|');
        //        Array.Reverse(merc_hash_vars_seq);
        //        merc_hash_string = ConfigurationManager.AppSettings["SALT"] + "|" + Request.Form["status"];

        //        foreach (string merc_hash_var in merc_hash_vars_seq)
        //        {
        //            merc_hash_string += "|";
        //            merc_hash_string = merc_hash_string + (Request.Form[merc_hash_var] != null ? Request.Form[merc_hash_var] : "");
        //        }
        //        merc_hash = Generatehash512(merc_hash_string).ToLower();

        //        if (merc_hash != Request.Form["hash"])
        //        {
        //            //Response.Write("Hash value did not matched");

        //        }
        //        else
        //        {
        //            order_id = Request.Form["txnid"];
        //            clsFramework objFramework = new clsFramework();
        //            MembershipUser mu = Membership.GetUser();
        //            SqlParameter[] parameters = { 
                                               
        //            new SqlParameter ("@CashOnShopUserID",SqlDbType.VarChar){Value=mu.ProviderUserKey.ToString()},
        //            new SqlParameter ("@GatewayTransactionID",SqlDbType.VarChar){Value=order_id},
        //            new SqlParameter ("@ProductInfo",SqlDbType.VarChar){Value=Convert.ToString(Request.Form["productinfo"])},
        //            new SqlParameter ("@RechargeType",SqlDbType.VarChar){Value=Convert.ToString(Request.Form["udf1"])},
        //            new SqlParameter ("@OperatorCode",SqlDbType.VarChar){Value=Convert.ToString(Request.Form["udf2"])},
        //            new SqlParameter ("@MobileOrDTH",SqlDbType.VarChar){Value=Convert.ToString(Request.Form["phone"])},
        //            new SqlParameter ("@AmountPaid",SqlDbType.VarChar){Value=Convert.ToString(Request.Form["amount"])},
        //            new SqlParameter ("@TransactionStatus",SqlDbType.VarChar){Value="1"}};
        //            objFramework.ExecuteNonQuery("adv_Proc_PaymentGatewayTransaction", CommandType.StoredProcedure, parameters);
        //            lblmsg.Text = RechargeAndBillpayment(Convert.ToString(Request.Form["udf1"]), Convert.ToString(Request.Form["udf2"]), Convert.ToString(Request.Form["phone"]), Convert.ToString(Request.Form["udf4"]), Convert.ToString(Request.Form["udf3"]), order_id);
        //            //Response.Write("value matched");
        //        }

        //    }
        //    else if (Request.Form["status"] == null)
        //    {
        //        lblmsg.Text = RechargeAndBillpayment(Convert.ToString(Session["RechargeType"]), Convert.ToString(Session["OperatorCode"]), Convert.ToString(Session["mobile"]), Convert.ToString(Session["RechAmount"]), Convert.ToString(Session["RechAmount"]),"");
        //        Session.Remove("mobile");
        //        Session.Remove("OperatorCode");
        //        Session.Remove("RechAmount");
        //        Session.Remove("RechargeType");
        //    }

        //    else
        //    {

        //        Response.Write("Hash value did not matched");
        //        //osc_redirect(osc_href_link(FILENAME_CHECKOUT, 'payment' , 'SSL', null, null,true));

        //    }
        //}

        //catch (Exception ex)
        //{
        //    Response.Write("<span style='color:red'>" + ex.Message + "</span>");

        //}
    }
    public string Generatehash512(string text)
    {

        byte[] message = Encoding.UTF8.GetBytes(text);

        UnicodeEncoding UE = new UnicodeEncoding();
        byte[] hashValue;
        SHA512Managed hashString = new SHA512Managed();
        string hex = "";
        hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format("{0:x2}", x);
        }
        return hex;

    }

    public string RechargeAndBillpayment(string RechargeType, string OperatorCode, string mobile, string Amount, string WalletAmt, string PaymentGatewayTransactionID)
    {
        clsFramework objFramework = new clsFramework();
        string mess = string.Empty;
        #region Find Operator Code
        SqlParameter[] parametersOperator = { };
        DataTable dtOperator = new DataTable();
        string operatorcodeName = string.Empty;
        dtOperator = objFramework.GetRecordSet("select  opratorcode,operatorname,operatorCodename from adv_OperatorCode where Activestatus =1 and serviceType='" + RechargeType + "' and  opratorcode='" + OperatorCode + "' ", CommandType.Text, parametersOperator);
        if (dtOperator != null)
        {
            if (dtOperator.Rows.Count > 0)
                operatorcodeName = dtOperator.Rows[0]["operatorCodename"].ToString();
        }
        #endregion
        SqlParameter[] parameters = { };
        WebClient client = new WebClient();
        string OrderID = string.Empty;
        DataTable dtMaxID = objFramework.GetRecordSet("select isnull(max(APIResponseID),0)+1 from adv_Operator_APIResponse", CommandType.Text, parameters);
        OrderID = dtMaxID.Rows[0][0].ToString().PadLeft(6, '1');
        Int64 uniqueID = DateTime.Now.Ticks;
        string API = string.Empty;
        if (RechargeType.ToLower() == "prepaid")
            API = "https://joloapi.com/api/recharge.php?mode=0&userid=cashonshop&key=899388873156283&operator=" + operatorcodeName + "&service=" + mobile + "&amount=" + Amount + "&orderid=" + OrderID + "&type=text";
        else if (RechargeType.ToLower() == "postpaid")
            API = "https://joloapi.com/api/cbill.php?mode=0&userid=cashonshop&key=899388873156283&operator=" + operatorcodeName + "&service=" + mobile + "&amount=" + Amount + "&orderid=" + OrderID + "&type=text";
        var dotd = client.DownloadString(API);
        DataTable dt = new DataTable();

        if (dotd.Split(',').Length == 2)
        {
            dt = objFramework.GetRecordSet("SELECT ErrorCode, ErrorDetail, Status FROM  adv_OperatorErrorCode where isnull(Status,1) =1 and ErrorCode='" + dotd.Split(',')[1].ToString() + "' ", CommandType.Text, parameters);
            if (dt.Rows.Count > 0)
                mess = dt.Rows[0]["ErrorDetail"].ToString();

            //if Payment gateway transaction is successfull but mobile recharge failed then call for refund
        }

        else if (dotd.Split(',').Length > 2)
        {
            MembershipUser mu = Membership.GetUser();
            string[] data = dotd.Split(',');
            if (data[7].ToString() == string.Empty)
            {
                DataTable dtDispute = new DataTable();
                string uri1 = "https://joloapi.com/api/dispute.php?userid=cashonshop&key=899388873156283&servicetype=1&txn=" + data[0].ToString() + "&type=text";
                var dotd1 = client.DownloadString(uri1);
                objFramework.ExecuteNonQuery("insert into adv_Operator_APIResponse(CashOnShopUserID,JoloOrderID,SuccessStatus,Operator,Service,Amount,OurOrderID,ErrorCode,OperatorID,Balance,Margin,Time,WalletAmount,PaymentGatewayTransactionID)values('" + mu.ProviderUserKey.ToString() + "','" + data[0].ToString() + "','" + dotd1[0].ToString() + "','" + data[2].ToString() + "','" + data[3].ToString() + "','" + data[4].ToString() + "','" + data[5].ToString() + "','" + data[6].ToString() + "','" + data[7].ToString() + "','" + data[8].ToString() + "','" + data[9].ToString() + "','" + data[10].ToString() + "','" + WalletAmt + "','"+PaymentGatewayTransactionID+"')", CommandType.Text, parameters);
                mess = "Waiting For Operator Confirmation.";
            }
            else
            {
                objFramework.ExecuteNonQuery("insert into adv_Operator_APIResponse(CashOnShopUserID,JoloOrderID,SuccessStatus,Operator,Service,Amount,OurOrderID,ErrorCode,OperatorID,Balance,Margin,Time,WalletAmount,PaymentGatewayTransactionID)values('" + mu.ProviderUserKey.ToString() + "','" + data[0].ToString() + "','" + data[1].ToString() + "','" + data[2].ToString() + "','" + data[3].ToString() + "','" + data[4].ToString() + "','" + data[5].ToString() + "','" + data[6].ToString() + "','" + data[7].ToString() + "','" + data[8].ToString() + "','" + data[9].ToString() + "','" + data[10].ToString() + "','" + WalletAmt + "','" + PaymentGatewayTransactionID + "')", CommandType.Text, parameters);
                mess = "Recharge Successfully.";
            }


        }
        return mess;
    }
}